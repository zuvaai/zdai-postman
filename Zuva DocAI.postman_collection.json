{
	"info": {
		"_postman_id": "882cceb9-42f5-4859-a8cd-6008cbe9b81b",
		"name": "Zuva DocAI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8497264"
	},
	"item": [
		{
			"name": "Files",
			"item": [
				{
					"name": "Submit a PDF File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"The PDF was submitted successfully.\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"The response contains a file_id.\", function () {",
									"    pm.expect(jsonData).to.have.property('file_id');",
									"    pm.environment.set(\"file_id\", jsonData[\"file_id\"]);",
									"",
									"    // Chaining for when we run the whole collection",
									"    postman.setNextRequest(\"Create OCR Request\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "file",
							"file": {
								"src": "CANADAGOOS-F1Securiti-2152017.PDF"
							}
						},
						"url": {
							"raw": "{{zdai-base-url}}/files",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"files"
							]
						}
					},
					"response": [
						{
							"name": "Successfully submitted",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "CANADAGOOS-F1Securiti-2152017.PDF"
									}
								},
								"url": {
									"raw": "{{zdai-base-url}}/files",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"files"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e407f1qk1er7odm6tg\",\n    \"attributes\": {\n        \"content-type\": \"application/pdf\"\n    },\n    \"permissions\": [\n        \"\"\n    ],\n    \"expiration\": \"2021-10-07T12:07:57Z\"\n}"
						}
					]
				},
				{
					"name": "Submit a Text File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"The Text file was submitted successfully.\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"The response contains a file_id.\", function () {",
									"    pm.expect(jsonData).to.have.property('file_id');",
									"    pm.environment.set(\"file_id\", jsonData[\"file_id\"]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "file",
							"file": {
								"src": "CANADAGOOS-F1Securiti-2152017.txt"
							}
						},
						"url": {
							"raw": "{{zdai-base-url}}/files",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"files"
							]
						}
					},
					"response": [
						{
							"name": "Successfully submitted",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "CANADAGOOS-F1Securiti-2152017.txt"
									}
								},
								"url": {
									"raw": "{{zdai-base-url}}/files",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"files"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e40jn1qk1er7odm71g\",\n    \"attributes\": {\n        \"content-type\": \"text/plain\"\n    },\n    \"permissions\": [\n        \"\"\n    ],\n    \"expiration\": \"2021-10-07T12:08:46Z\"\n}"
						}
					]
				},
				{
					"name": "Submit a ZuvaOCR File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"The ZuvaOCR file was submitted successfully.\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"The response contains a file_id.\", function () {",
									"    pm.expect(jsonData).to.have.property('file_id');",
									"    pm.environment.set(\"file_id\", jsonData[\"file_id\"]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/kiraocr",
								"type": "text"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "CANADAGOOS-F1Securiti-2152017.zuvaocr"
							}
						},
						"url": {
							"raw": "{{zdai-base-url}}/files",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"files"
							]
						}
					},
					"response": [
						{
							"name": "Successfully submitted",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/kiraocr",
										"type": "text"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "CANADAGOOS-F1Securiti-2152017.zuvaocr"
									}
								},
								"url": {
									"raw": "{{zdai-base-url}}/files",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"files"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e40of1qk1er7odm740\",\n    \"attributes\": {\n        \"content-type\": \"application/kiraocr\"\n    },\n    \"permissions\": [\n        \"\"\n    ],\n    \"expiration\": \"2021-10-07T12:09:05Z\"\n}"
						}
					]
				},
				{
					"name": "Delete a File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The file was deleted successfully.\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{zdai-base-url}}/files/{{file_id}}",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"files",
								"{{file_id}}"
							]
						}
					},
					"response": [
						{
							"name": "File Deleted",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/files/{{file_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"files",
										"{{file_id}}"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "File not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/files/{{file_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"files",
										"{{file_id}}"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"code\": \"file-not-found\",\n    \"message\": \"the specified file does not exist\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "OCR",
			"item": [
				{
					"name": "Create OCR Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"The OCR request was created successfully.\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"The response contains a request_id.\", function () {",
									"    pm.expect(jsonData[\"file_ids\"][0]).to.have.property('request_id');",
									"    pm.environment.set(\"ocr_request_id\", jsonData[\"file_ids\"][0][\"request_id\"]);",
									"",
									"    // Chaining for when we run the whole collection",
									"    pm.environment.set(\"test_exp_backoff\", 100);",
									"    pm.environment.set(\"test_max_attempts\", 20);",
									"    pm.environment.set(\"test_attempts\", 0);",
									"    postman.setNextRequest(\"Get OCR Request Status\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"file_ids\": [\n        \"{{file_id}}\"\n    ],\n    \"layout\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zdai-base-url}}/ocr",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"ocr"
							]
						}
					},
					"response": [
						{
							"name": "OCR Request Created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"file_ids\": [\n        \"c5e41av1qk1er7odm79g\"\n    ],\n    \"layout\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zdai-base-url}}/ocr",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"ocr"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_ids\": [\n        {\n            \"file_id\": \"c5e41av1qk1er7odm79g\",\n            \"status\": \"queued\",\n            \"request_id\": \"c5e41cgvsl2pp2tpc9i0\"\n        }\n    ]\n}"
						},
						{
							"name": "Creation failed due to bad file_id",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"file_ids\": [\n        \"c5e41av1qk1er7odm79g\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zdai-base-url}}/ocr",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"ocr"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"code\": \"invalid_ocr_request\",\n        \"message\": \"The `file_ids` attribute of the request body is missing or contains an invalid value.\"\n    }\n}"
						}
					]
				},
				{
					"name": "Get OCR Request Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"The OCR request status was successfully retrieved.\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    // Chaining for when we run the whole collection",
									"    if (jsonData[\"status\"] == \"complete\") {",
									"        postman.setNextRequest(\"Get OCR Request Text\");",
									"        setTimeout(function(){}, 0);",
									"    } else if (jsonData[\"status\"] == \"queued\" || jsonData[\"status\"] == \"processing\") {",
									"        if (pm.environment.get(\"test_attempts\") < pm.environment.get(\"test_max_attempts\")) {",
									"            pm.environment.set(\"test_attempts\", pm.environment.get(\"test_attempts\") + 1)",
									"            pm.environment.set(\"test_exp_backoff\", Math.min(16000, 2 * pm.environment.get(\"test_exp_backoff\")));",
									"            console.log(\"setting timeout to \" + pm.environment.get(\"test_exp_backoff\") + \" ms\");",
									"            setTimeout(function(){}, pm.environment.get(\"test_exp_backoff\"));",
									"            postman.setNextRequest(\"Get OCR Request Status\");",
									"        } else {",
									"            console.log(\"timed out\");",
									"            postman.setNextRequest(null);",
									"        }",
									"    } else {",
									"        console.log(\"failed\");",
									"        postman.setNextRequest(null);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{zdai-base-url}}/ocr/{{ocr_request_id}}",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"ocr",
								"{{ocr_request_id}}"
							]
						}
					},
					"response": [
						{
							"name": "OCR Request Completed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/ocr/{{ocr_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"ocr",
										"{{ocr_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"request_id\": \"c5e41cgvsl2pp2tpc9i0\",\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"complete\"\n}"
						},
						{
							"name": "OCR Request Failed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/ocr/{{ocr_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"ocr",
										"{{ocr_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"request_id\": \"c5e41cgvsl2pp2tpc9i0\",\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"failed\"\n}"
						},
						{
							"name": "OCR Request Processing",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/ocr/{{ocr_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"ocr",
										"{{ocr_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"request_id\": \"c5e41cgvsl2pp2tpc9i0\",\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"processing\"\n}"
						},
						{
							"name": "OCR Request Queued",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/ocr/{{ocr_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"ocr",
										"{{ocr_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"request_id\": \"c5e41cgvsl2pp2tpc9i0\",\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"queued\"\n}"
						},
						{
							"name": "Retrieval failed due to invalid request_id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/ocr/{{ocr_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"ocr",
										"{{ocr_request_id}}"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"code\": \"invalid_request_id_format\",\n        \"message\": \"The request ID provided is not in desired format.\"\n    }\n}"
						}
					]
				},
				{
					"name": "Get Multiple OCR Request Statuses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The OCR request status was successful.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{zdai-base-url}}/ocrs?request_id={{ocr_request_ids}}&request_id={{ocr_request_ids}}&request_id={{ocr_request_ids}}&request_id={{ocr_request_ids}}",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"ocrs"
							],
							"query": [
								{
									"key": "request_id",
									"value": "{{ocr_request_ids}}"
								},
								{
									"key": "request_id",
									"value": "{{ocr_request_ids}}"
								},
								{
									"key": "request_id",
									"value": "{{ocr_request_ids}}"
								},
								{
									"key": "request_id",
									"value": "{{ocr_request_ids}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "Multiple OCR Request Completed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/ocrs/?request_id=ce7ksjs2nt5o2t4eg2og&request_id=ce7ksk42nt5o2t4eg2pg&request_id=ce7ksk42nt5o2t4eg2qg&request_id=ce7ksk42nt5o2t4eg2rg",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"ocrs",
										""
									],
									"query": [
										{
											"key": "request_id",
											"value": "ce7ksjs2nt5o2t4eg2og"
										},
										{
											"key": "request_id",
											"value": "ce7ksk42nt5o2t4eg2pg"
										},
										{
											"key": "request_id",
											"value": "ce7ksk42nt5o2t4eg2qg"
										},
										{
											"key": "request_id",
											"value": "ce7ksk42nt5o2t4eg2rg"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"num_found\": 4,\n    \"num_errors\": 0,\n    \"statuses\": {\n        \"ce7ksjs2nt5o2t4eg2og\": {\n            \"request_id\": \"ce7ksjs2nt5o2t4eg2og\",\n            \"file_id\": \"ce7ks02b08o78qsc6qog\",\n            \"status\": \"complete\"\n        },\n        \"ce7ksk42nt5o2t4eg2pg\": {\n            \"request_id\": \"ce7ksk42nt5o2t4eg2pg\",\n            \"file_id\": \"ce7ks3qb08o78qsc6qsg\",\n            \"status\": \"complete\"\n        },\n        \"ce7ksk42nt5o2t4eg2qg\": {\n            \"request_id\": \"ce7ksk42nt5o2t4eg2qg\",\n            \"file_id\": \"ce7ks62b08o78qsc6qv0\",\n            \"status\": \"complete\"\n        },\n        \"ce7ksk42nt5o2t4eg2rg\": {\n            \"request_id\": \"ce7ksk42nt5o2t4eg2rg\",\n            \"file_id\": \"ce7ks8ib08o78qsc6r1g\",\n            \"status\": \"complete\"\n        }\n    }\n}"
						},
						{
							"name": "Multiple OCR Request Failed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/ocrs/?request_id=ce7ksjs2nt5o2t4eg2og&request_id=ce7ksk42nt5o2t4eg2pg&request_id=ce7ksk42nt5o2t4eg2qg&request_id=ce7ksk42nt5o2t4eg2rg",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"ocrs",
										""
									],
									"query": [
										{
											"key": "request_id",
											"value": "ce7ksjs2nt5o2t4eg2og"
										},
										{
											"key": "request_id",
											"value": "ce7ksk42nt5o2t4eg2pg"
										},
										{
											"key": "request_id",
											"value": "ce7ksk42nt5o2t4eg2qg"
										},
										{
											"key": "request_id",
											"value": "ce7ksk42nt5o2t4eg2rg"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"num_found\": 4,\n    \"num_errors\": 0,\n    \"statuses\": {\n        \"ce7ksjs2nt5o2t4eg2og\": {\n            \"request_id\": \"ce7ksjs2nt5o2t4eg2og\",\n            \"file_id\": \"ce7ks02b08o78qsc6qog\",\n            \"status\": \"failed\"\n        },\n        \"ce7ksk42nt5o2t4eg2pg\": {\n            \"request_id\": \"ce7ksk42nt5o2t4eg2pg\",\n            \"file_id\": \"ce7ks3qb08o78qsc6qsg\",\n            \"status\": \"failed\"\n        },\n        \"ce7ksk42nt5o2t4eg2qg\": {\n            \"request_id\": \"ce7ksk42nt5o2t4eg2qg\",\n            \"file_id\": \"ce7ks62b08o78qsc6qv0\",\n            \"status\": \"failed\"\n        },\n        \"ce7ksk42nt5o2t4eg2rg\": {\n            \"request_id\": \"ce7ksk42nt5o2t4eg2rg\",\n            \"file_id\": \"ce7ks8ib08o78qsc6r1g\",\n            \"status\": \"failed\"\n        }\n    }\n}"
						},
						{
							"name": "Multiple OCR Request Processing",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/ocrs/?request_id=ce7ksjs2nt5o2t4eg2og&request_id=ce7ksk42nt5o2t4eg2pg&request_id=ce7ksk42nt5o2t4eg2qg&request_id=ce7ksk42nt5o2t4eg2rg",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"ocrs",
										""
									],
									"query": [
										{
											"key": "request_id",
											"value": "ce7ksjs2nt5o2t4eg2og"
										},
										{
											"key": "request_id",
											"value": "ce7ksk42nt5o2t4eg2pg"
										},
										{
											"key": "request_id",
											"value": "ce7ksk42nt5o2t4eg2qg"
										},
										{
											"key": "request_id",
											"value": "ce7ksk42nt5o2t4eg2rg"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"num_found\": 4,\n    \"num_errors\": 0,\n    \"statuses\": {\n        \"ce7ksjs2nt5o2t4eg2og\": {\n            \"request_id\": \"ce7ksjs2nt5o2t4eg2og\",\n            \"file_id\": \"ce7ks02b08o78qsc6qog\",\n            \"status\": \"processing\"\n        },\n        \"ce7ksk42nt5o2t4eg2pg\": {\n            \"request_id\": \"ce7ksk42nt5o2t4eg2pg\",\n            \"file_id\": \"ce7ks3qb08o78qsc6qsg\",\n            \"status\": \"processing\"\n        },\n        \"ce7ksk42nt5o2t4eg2qg\": {\n            \"request_id\": \"ce7ksk42nt5o2t4eg2qg\",\n            \"file_id\": \"ce7ks62b08o78qsc6qv0\",\n            \"status\": \"processing\"\n        },\n        \"ce7ksk42nt5o2t4eg2rg\": {\n            \"request_id\": \"ce7ksk42nt5o2t4eg2rg\",\n            \"file_id\": \"ce7ks8ib08o78qsc6r1g\",\n            \"status\": \"processing\"\n        }\n    }\n}"
						},
						{
							"name": "Multiple OCR Request Queued",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/ocrs/?request_id=ce7ksjs2nt5o2t4eg2og&request_id=ce7ksk42nt5o2t4eg2pg&request_id=ce7ksk42nt5o2t4eg2qg&request_id=ce7ksk42nt5o2t4eg2rg",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"ocrs",
										""
									],
									"query": [
										{
											"key": "request_id",
											"value": "ce7ksjs2nt5o2t4eg2og"
										},
										{
											"key": "request_id",
											"value": "ce7ksk42nt5o2t4eg2pg"
										},
										{
											"key": "request_id",
											"value": "ce7ksk42nt5o2t4eg2qg"
										},
										{
											"key": "request_id",
											"value": "ce7ksk42nt5o2t4eg2rg"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"num_found\": 4,\n    \"num_errors\": 0,\n    \"statuses\": {\n        \"ce7ksjs2nt5o2t4eg2og\": {\n            \"request_id\": \"ce7ksjs2nt5o2t4eg2og\",\n            \"file_id\": \"ce7ks02b08o78qsc6qog\",\n            \"status\": \"queued\"\n        },\n        \"ce7ksk42nt5o2t4eg2pg\": {\n            \"request_id\": \"ce7ksk42nt5o2t4eg2pg\",\n            \"file_id\": \"ce7ks3qb08o78qsc6qsg\",\n            \"status\": \"queued\"\n        },\n        \"ce7ksk42nt5o2t4eg2qg\": {\n            \"request_id\": \"ce7ksk42nt5o2t4eg2qg\",\n            \"file_id\": \"ce7ks62b08o78qsc6qv0\",\n            \"status\": \"queued\"\n        },\n        \"ce7ksk42nt5o2t4eg2rg\": {\n            \"request_id\": \"ce7ksk42nt5o2t4eg2rg\",\n            \"file_id\": \"ce7ks8ib08o78qsc6r1g\",\n            \"status\": \"queued\"\n        }\n    }\n}"
						},
						{
							"name": "Retrieval failed due to invalid request_id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/ocrs/?request_id=ce7ksjs2nt5o2t4eg2og&request_id=ce7ksk42nt5o2t4eg2pg&request_id=ce7ksk42nt5o2t4eg2qg&request_id=ce7ksk42nt5o2t4eg2rg",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"ocrs",
										""
									],
									"query": [
										{
											"key": "request_id",
											"value": "ce7ksjs2nt5o2t4eg2og"
										},
										{
											"key": "request_id",
											"value": "ce7ksk42nt5o2t4eg2pg"
										},
										{
											"key": "request_id",
											"value": "ce7ksk42nt5o2t4eg2qg"
										},
										{
											"key": "request_id",
											"value": "ce7ksk42nt5o2t4eg2rg"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"num_found\": 3,\n    \"num_errors\": 1,\n    \"statuses\": {\n        \"ce7ksjs2nt5o2t4eg2og\": {\n            \"request_id\": \"ce7ksjs2nt5o2t4eg2og\",\n            \"file_id\": \"ce7ks02b08o78qsc6qog\",\n            \"status\": \"complete\"\n        },\n        \"ce7ksk42nt5o2t4eg2qg\": {\n            \"request_id\": \"ce7ksk42nt5o2t4eg2qg\",\n            \"file_id\": \"ce7ks62b08o78qsc6qv0\",\n            \"status\": \"complete\"\n        },\n        \"ce7ksk42nt5o2t4eg2rg\": {\n            \"request_id\": \"ce7ksk42nt5o2t4eg2rg\",\n            \"file_id\": \"ce7ks8ib08o78qsc6r1g\",\n            \"status\": \"complete\"\n        }\n    },\n    \"errors\": {\n        \"ce7ksk42nt5o2t4eg2pg\": {\n            \"error\": {\n                \"code\": \"invalid_request_id_format\",\n                \"message\": \"The request ID provided is not in desired format.\"\n            }\n        }\n    }\n}"
						},
						{
							"name": "Retrieval failed due to request_id not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/ocrs/?request_id=ce7ksjs2nt5o2t4eg2og&request_id=ce7ksk42nt5o2t4eg2pg&request_id=ce7ksk42nt5o2t4eg2qg&request_id=ce7ksk42nt5o2t4eg2rg",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"ocrs",
										""
									],
									"query": [
										{
											"key": "request_id",
											"value": "ce7ksjs2nt5o2t4eg2og"
										},
										{
											"key": "request_id",
											"value": "ce7ksk42nt5o2t4eg2pg"
										},
										{
											"key": "request_id",
											"value": "ce7ksk42nt5o2t4eg2qg"
										},
										{
											"key": "request_id",
											"value": "ce7ksk42nt5o2t4eg2rg"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"num_found\": 3,\n    \"num_errors\": 1,\n    \"statuses\": {\n        \"ce7ksjs2nt5o2t4eg2og\": {\n            \"request_id\": \"ce7ksjs2nt5o2t4eg2og\",\n            \"file_id\": \"ce7ks02b08o78qsc6qog\",\n            \"status\": \"complete\"\n        },\n        \"ce7ksk42nt5o2t4eg2qg\": {\n            \"request_id\": \"ce7ksk42nt5o2t4eg2qg\",\n            \"file_id\": \"ce7ks62b08o78qsc6qv0\",\n            \"status\": \"complete\"\n        },\n        \"ce7ksk42nt5o2t4eg2rg\": {\n            \"request_id\": \"ce7ksk42nt5o2t4eg2rg\",\n            \"file_id\": \"ce7ks8ib08o78qsc6r1g\",\n            \"status\": \"complete\"\n        }\n    },\n    \"errors\": {\n        \"ce7ksjs2nt5o2t4eg2og\": {\n            \"error\": {\n                \"code\": \"invalid_request_id\",\n                \"message\": \"The request ID provided was not found.\"\n            }\n        }\n    }\n}"
						},
						{
							"name": "Failed to retrieve all Request IDs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/ocrs?request_id=cdrptcq8rut0hgjdgre0&request_id=cdrptd28rut0hgjdgrf0&request_id=cdrptda8rut0hgjdgrg0&request_id=cdrptdi8rut0hgjdgrh0&request_id=cdrptdi8rut0hgjdgrh2",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"ocrs"
									],
									"query": [
										{
											"key": "request_id",
											"value": "cdrptcq8rut0hgjdgre0"
										},
										{
											"key": "request_id",
											"value": "cdrptd28rut0hgjdgrf0"
										},
										{
											"key": "request_id",
											"value": "cdrptda8rut0hgjdgrg0"
										},
										{
											"key": "request_id",
											"value": "cdrptdi8rut0hgjdgrh0"
										},
										{
											"key": "request_id",
											"value": "cdrptdi8rut0hgjdgrh2"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"code\": \"unknown_error\",\n        \"message\": \"An unknown error occurred while processing the request.\"\n    }\n}"
						}
					]
				},
				{
					"name": "Get OCR Request Text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"The OCR request text was successfully returned.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The OCR request text is valid.\", function() {",
									"    pm.expect(jsonData).to.have.property('text');",
									"    pm.expect(jsonData[\"text\"].length).to.have.greaterThan(1)",
									"});",
									"",
									"// Chaining for when we run the whole collection",
									"postman.setNextRequest(\"Get OCR Request Images\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{zdai-base-url}}/ocr/{{ocr_request_id}}/text",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"ocr",
								"{{ocr_request_id}}",
								"text"
							]
						}
					},
					"response": [
						{
							"name": "Successful response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/ocr/{{ocr_request_id}}/text",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"ocr",
										"{{ocr_request_id}}",
										"text"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"request_id\": \"c5e41cgvsl2pp2tpc9i0\",\n    \"text\": \"Exhibit ... \"\n}"
						}
					]
				},
				{
					"name": "Get OCR Request Images",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The OCR request image was successfully returned.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The OCR request image is valid.\", function() {",
									"    pm.response.to.have.header(\"content-type\");",
									"    pm.expect(pm.response.to.be.header(\"content-type\", \"application/zip\"));",
									"});",
									"",
									"postman.setNextRequest(\"Get File Layouts\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{zdai-base-url}}/ocr/{{ocr_request_id}}/images",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"ocr",
								"{{ocr_request_id}}",
								"images"
							]
						}
					},
					"response": [
						{
							"name": "OCR images retrieved",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/ocr/{{ocr_request_id}}/images",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"ocr",
										"{{ocr_request_id}}",
										"images"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "PK\u0003\u0004\u0014\u0000\b\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u00000.png�\f�s���b``���p\tb``����&�����\u0010T�l����\u0019�\u0013����vv���n�{�X\u0019\u0018�L=]\u001cC*n��}�h��\u0000k����/N�x%��/K/�\\�kՈ�\t�i�&I�\u0019�\bh��q���=�j~��ﬕ8��ՄGv\u001c>���(a�J���iӋ���6��ܰ�V����������X3��tݴ[�̯�]\u0014>�-~\u001fo�Y�¥�c>{ؔ��_�ߘQ�}�t���1z��\u001bKw�O/̫9:=u�ޝ5\u000b\u000f�1qߓ�X{�C��sqWw�f\u0019���fק��6����%r�dJ�\\�K��\u0013\n�d��w��/��^}&O�~�\f����5\u001f�\u0015y2��?$^���S�:�o�������ovo�\u0012��.ߒOf��\u001dO���q�.���\u0017\u0013?�Z�v��5�W��+�`�z��S��jf�_��\u000en�����m/�־7����W��/NMX+����Y\u001a��9\u0017ˤJ\u0016���:��醢�\u001b�jj\u0016\u0016xsl_��U�C��v��\n�.Y��-\t��\u0014(���Q�gn�m�SW/o����5�p���ٿ+\u0016�%��3���\u001e/\u0016Qp�@�q����ߝ\u0017��������Yv���}�W�]��\u0013��c���G3����Y�?��ڛ���s���\u00157��\n��䜲���\u0003]��׾q7n]:ϼ����\u0003R�\u001f�\u0017J6���k�P�c�\u0005�\u001bKo|�n���w4S���*\u001b\u001e\u001ck\u0014=~(�̱���Y+S��\u000e�2,�=l�v�zv��u�\u0011�_�[�\u001d�ĝ'\u0017���͉�\u001f�hX��Zsν�kƼ�W�w>�L�>~=?H�y�]�M�׌c7��7n�I88w��c2�d|/J_���X�?4�UdmW��\u0016�(/��/��r�\u000e<�NF��qM�泚��IY�k\"���y[g]�<����%��n\u0007�M�~y�Ҩ�Y;J+,f���`�!�L��sϏĳ��|iw�U���Gozw_ڱ���N���G��?������O}\u000f���\u001c���jJ�2�?��b�\\���\u0015|>p+_!�����ګB\u0012\u0007b�_���'�cF�(\u0018\u0005�`\u0014�\u0002���؞A\u0002���\n\u0013\u000e����~.�\u0012�\u0000\u0001\u0000\u0000��PK\u0007\b�\u0013�j�\u0003\u0000\u0000�\n\u0000\u0000PK\u0003\u0004\u0014\u0000\b\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u00001.png�\f�s���b``���p\tb``����&�����\u0010T�l����\u0019�\u0013����\u000e\u000e���n����\u0019\u0018�|=]\u001cC*n����l��\u0000[@��\u000bgKMp\u00137_\u0019^����_��PW�\u000f1�\"M�!\u0002\u000e�\u001ey�l,s{������>^���\u0018��_�!F�Jbʟ��3��>﻾��>��+>��?����L���D��{9�A5S���\f�}��>���ݰ�<\u0013���\u0007�V>ؼ��\u001a���_*3,�VM3�m\u001c��[�V��WU�a=���]w�4��Ze�\u0003����Z\u0017����*i;sS�ҽ+k�-�\\�\\���Re�˒��k^�\t�l��H���'�,o�Q�:����O�tTv\u001d���:]���I�'*=�\u0013�8�J��\u001d]��}�\u000b��g�{M>���!\u001d��23\n���}����-��\u001a�S~=���8���G�\u0017�\u0007.�l����ہ���<k$�\u001b�R��]_>|��Z߼��Dk�?��ӧa!��חk�L�i�D�=׌N��~Ġ��I�\nI2���'�=�`~}é��i��R��������%���B��\t���&�X�h(r���\u0013��g~:�6�Lc�1��7�Yh3q���(�}�ꁋNc�m���?�Ƿ��pq�_�\u001b�־sR?��Q�\u0018z|V��Χ\u0013/\u001b�>�e��\"���;ߚM�3#�>^d֎}\u0014Ϲf\u0006���;�{�\"&2i����Ϝ\u001d\u0015\u0013�v�p#��y�f�W�\u0018Lz�V|����������VG�Y��\u0012\u000e�e�~v�r�]F���Oq�����M���t?�W�WO��n�N�7^\n�K8��Y��iԩ\u0012Q��\u0013��{U��y��;w��\u001fq�M_�����x}�[>���ؗg\u001f�mh�\u0010�(xn�f[�Q�O�u�+��W\u0002��V��\u001dp����f�\u0017^zu9��u�6{XΩ��U�L����fq����������r���K���r��-�޷]���\u0003ϵ�\u001e�����.���>��\u000f�\">{}/1V��-q�߳w�\u0014��|tKqmUT[eѩ��l^��ғ�_��Ֆ�ey���K�E箨���c�8��\u000b�r�5AכD\u000e�2g���'��F�(\u0018\u0005�`\u0014�\u0002���؞!F���W��&\u0010����e�SB\u0013 \u0000\u0000��PK\u0007\bM/\u0019��\u0003\u0000\u0000�\n\u0000\u0000PK\u0003\u0004\u0014\u0000\b\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u00002.png�\f�s���b``���p\tb``����&�����\u0010T�l����\u0019�\u0013����\u000e\u000e���.��3�\u0019\u0018�b=]\u001cC*n���:h��\u0000[����/��R�{���j���s�<*������1\f\u0011�@i��o�q���{j�a껧��\nr�﮲o<����\u0001-�=�\\�aV��(�3���=V�_t>�g�7��v��V\u001bNy3��ӝ*ϳF��{��ֺG{�=\u0013���\tG|�f�n3��I���Y^���\u0005/B��v]���e�&����﫝m��g��.(\tVod�\u0017��}�Fݻ���e���a�n%���o���9σ���l=t'����{39�Ky�\\�cݵVl?u��4��`�Ǉ��_��z�ۻu���]h�L������xi��n\u0005'��>>���:\u0016\u0007O�%�^�]g��*Pݥ�����♛<��\u001d��p��y��/ܞs��_j��^���r�ļ�o��om{y�͛��n{��Fȭ�\u0016U}R����Mdt���-�;4\u001e�=�=�xI�sB��\t�v���;����o�V����w5���n��\u0013:Wb]�\"��!%^�\u000bv\u001al�\u000f�w��ڴ��ؒ�=�r�\\��\u0017v��\t�0\\R!g䯺�T�����o_�5f�|i��tauh����r\u001ck�eV�L�XS���f��/�}Ļ-7\\��\\.�ĭ'\u0016q{�\u0004I��\u0017�V{Ϯ\u0017���z�VPB끦��\u0011��7�ٕ_���zE`~��U�\f�2\u0011��w�\u000en4���*a��\u0019,b1�\u001b�tlަ�2�,f�f����Rל\u001b��;��<O�d��D����m[��k�~\u0011�P�̥�#,a��e��\\�u�������������F��Nvwz}9���[4�\u0017�J�\u0011���c�^W�:5~RVxDzr׼���ʧ\u0007�f����k�X�ֳ��֪iߖ��\\�Z�[ʲ��§Z\u001b>\u0005�4~=�^�������e՚o�ܿ��4x�����ҥ�6U\u0004�T�>|�V���~�\n�y����n(�W��{�\u001a�M�R��\u0005�����k��Ñ����N��|��\u0007�\u0004�����Yw�E'\u001c��ƪ\u001e�+��Q��}�\u0018w\u0014%��*�d\u0010�]��\u001c��5\nF�(\u0018\u0005�`\u0014\u0010\u0004\u000f��1�����\u001d38\f�{����sJh\u0002\u0004\u0000\u0000��PK\u0007\b��I\u0004�\u0003\u0000\u0000�\n\u0000\u0000PK\u0001\u0002\u0014\u0000\u0014\u0000\b\u0000\b\u0000\u0000\u0000\u0000\u0000�\u0013�j�\u0003\u0000\u0000�\n\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00000.pngPK\u0001\u0002\u0014\u0000\u0014\u0000\b\u0000\b\u0000\u0000\u0000\u0000\u0000M/\u0019��\u0003\u0000\u0000�\n\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000b\u0004\u0000\u00001.pngPK\u0001\u0002\u0014\u0000\u0014\u0000\b\u0000\b\u0000\u0000\u0000\u0000\u0000��I\u0004�\u0003\u0000\u0000�\n\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000,\b\u0000\u00002.pngPK\u0005\u0006\u0000\u0000\u0000\u0000\u0003\u0000\u0003\u0000�\u0000\u0000\u0000Z\f\u0000\u0000\u0000\u0000"
						}
					]
				},
				{
					"name": "Get File Layouts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The layouts were successfully returned.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Request chaining for tests",
									"postman.setNextRequest(\"Get All Fields\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{zdai-base-url}}/ocr/{{ocr_request_id}}/layouts",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"ocr",
								"{{ocr_request_id}}",
								"layouts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Fields",
			"item": [
				{
					"name": "Get All Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service responded with a list of fields.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The service responded with at least one field in its response.\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.length).to.have.greaterThan(1)",
									"})",
									"",
									"postman.setNextRequest(\"Create a Field Extraction Request\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{zdai-base-url}}/fields",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"fields"
							]
						}
					},
					"response": [
						{
							"name": "Get All Fields",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/fields",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"fields"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "[\n    {\n        \"field_id\": \"00333a5d-0d92-42f5-b4d6-2488d5768bc8\",\n        \"name\": \"e\",\n        \"description\": \"\",\n        \"bias\": 0,\n        \"f_score\": 0,\n        \"precision\": 0,\n        \"recall\": 0,\n        \"document_count\": 0,\n        \"is_custom\": false,\n        \"is_trained\": false\n    }\n]"
						}
					]
				},
				{
					"name": "Create Empty Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"The new custom field was created successfully.\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"The response contains a field_id.\", function () {",
									"    pm.expect(jsonData).to.have.property(\"field_id\");",
									"    pm.environment.set(\"training_field_id\", jsonData[\"field_id\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"field_name\": \"Custom Field Postman\",\n    \"description\": \"This field was created as part of a Postman API call\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zdai-base-url}}/fields",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"fields"
							]
						}
					},
					"response": [
						{
							"name": "Successfully Created field",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"field_name\": \"Custom Field Postman\",\n    \"description\": \"This field was created as part of a Postman API call\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zdai-base-url}}/fields",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"fields"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"field_id\": \"2efa79d4-854d-46de-8087-f70778157dbf\"\n}"
						},
						{
							"name": "Create Field without field name",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"This field was created as part of a Postman API call\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zdai-base-url}}/fields",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"fields"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-length",
									"value": "81"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "date",
									"value": "Thu, 23 Dec 2021 18:41:49 GMT"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "3"
								},
								{
									"key": "server",
									"value": "istio-envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"code\": \"missing-field-name\",\n        \"message\": \"a field name must be provided\"\n    }\n}"
						},
						{
							"name": "Create Field with malformed request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"field_name\": \"Custom Field Postman\",\n    \"description\": \"This field was created as part of a Postman API call\",\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zdai-base-url}}/fields",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"fields"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-length",
									"value": "85"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "date",
									"value": "Thu, 23 Dec 2021 18:45:29 GMT"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "3"
								},
								{
									"key": "server",
									"value": "istio-envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"code\": \"request-invalid\",\n        \"message\": \"the request body contents is invalid\"\n    }\n}"
						}
					]
				},
				{
					"name": "Train Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"The custom field training request was created successfully.\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"The response contains a request_id.\", function () {",
									"    pm.expect(jsonData).to.have.property(\"request_id\");",
									"    pm.environment.set(\"field_training_request_id\", jsonData[\"request_id\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"file_id\":\"{{file_id}}\",\n        \"locations\":[\n            {\"start\":26952,\"end\":27310}\n        ]\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zdai-base-url}}/fields/{{training_field_id}}/train",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"fields",
								"{{training_field_id}}",
								"train"
							]
						}
					},
					"response": [
						{
							"name": "Field Training Request Successful",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"file_id\":\"c71pmdbo2ua691f0fkog\",\n        \"locations\":[\n            {\"start\":26952,\"end\":27310}\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zdai-base-url}}/fields/{{training_field_id}}/train",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"fields",
										"{{training_field_id}}",
										"train"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"field_id\": \"2efa79d4-854d-46de-8087-f70778157dbf\",\n    \"status\": \"queued\",\n    \"request_id\": \"c71qfbbo2ua8dqja2d70\"\n}"
						},
						{
							"name": "Field Training Ongoing",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"file_id\":\"c71pmdbo2ua691f0fkog\",\n        \"locations\":[\n            {\"start\":26952,\"end\":27310}\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zdai-base-url}}/fields/{{training_field_id}}/train",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"fields",
										"{{training_field_id}}",
										"train"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-length",
									"value": "135"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "date",
									"value": "Thu, 23 Dec 2021 18:48:14 GMT"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "806"
								},
								{
									"key": "server",
									"value": "istio-envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"code\": \"field-being-trained\",\n        \"message\": \"The field ID 2efa79d4-854d-46de-8087-f70778157dbf has an on-going training session\"\n    }\n}"
						}
					]
				},
				{
					"name": "Get Field Training Request Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"The field training status request was successfully retrieved.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The field training status response contains a status.\", function () {",
									"    pm.expect(jsonData).to.have.property(\"status\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{zdai-base-url}}/fields/{{training_field_id}}/train/{{field_training_request_id}}",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"fields",
								"{{training_field_id}}",
								"train",
								"{{field_training_request_id}}"
							]
						}
					},
					"response": [
						{
							"name": "Field Training Request Complete",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/fields/{{training_field_id}}/train/{{field_training_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"fields",
										"{{training_field_id}}",
										"train",
										"{{field_training_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"field_id\": \"2efa79d4-854d-46de-8087-f70778157dbf\",\n    \"status\": \"complete\",\n    \"request_id\": \"c71qfbbo2ua8dqja2d70\"\n}"
						},
						{
							"name": "Field Training Request Processing",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/fields/{{training_field_id}}/train/{{field_training_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"fields",
										"{{training_field_id}}",
										"train",
										"{{field_training_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"field_id\": \"2efa79d4-854d-46de-8087-f70778157dbf\",\n    \"status\": \"processing\",\n    \"request_id\": \"c71qfbbo2ua8dqja2d70\"\n}"
						},
						{
							"name": "Field Training Request Failed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/fields/{{training_field_id}}/train/{{field_training_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"fields",
										"{{training_field_id}}",
										"train",
										"{{field_training_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"field_id\": \"2efa79d4-854d-46de-8087-f70778157dbf\",\n    \"status\": \"failed\",\n    \"request_id\": \"c71qfbbo2ua8dqja2d70\"\n}"
						},
						{
							"name": "Field Training Request Queued",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/fields/{{training_field_id}}/train/{{field_training_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"fields",
										"{{training_field_id}}",
										"train",
										"{{field_training_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"field_id\": \"2efa79d4-854d-46de-8087-f70778157dbf\",\n    \"status\": \"queued\",\n    \"request_id\": \"c71qfbbo2ua8dqja2d70\"\n}"
						},
						{
							"name": "Field Training Request Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/fields/{{training_field_id}}/train/{{field_training_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"fields",
										"{{training_field_id}}",
										"train",
										"{{field_training_request_id}}"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-length",
									"value": "103"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "date",
									"value": "Thu, 23 Dec 2021 18:50:49 GMT"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "268"
								},
								{
									"key": "server",
									"value": "istio-envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"code\": \"request-id-not-found\",\n        \"message\": \"The request ID c71qfbbo2ua8dqja2d70 was not found\"\n    }\n}"
						}
					]
				},
				{
					"name": "Get Field Metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"The field metadata request was successful.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The field metadata response contains the metdata.\", function () {",
									"    pm.expect(jsonData).to.have.property(\"field_id\");",
									"    pm.expect(jsonData).to.have.property(\"name\");",
									"    pm.expect(jsonData).to.have.property(\"description\");",
									"    pm.expect(jsonData).to.have.property(\"read_only\");",
									"    pm.expect(jsonData).to.have.property(\"is_trained\");",
									"    pm.expect(jsonData).to.have.property(\"file_ids\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{zdai-base-url}}/fields/{{training_field_id}}/metadata",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"fields",
								"{{training_field_id}}",
								"metadata"
							]
						}
					},
					"response": [
						{
							"name": "Get Field Metadata",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/fields/{{training_field_id}}/metadata",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"fields",
										"{{training_field_id}}",
										"metadata"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"field_id\": \"2efa79d4-854d-46de-8087-f70778157dbf\",\n    \"name\": \"Custom Field Postman\",\n    \"description\": \"This field was created as part of a Postman API call\",\n    \"read_only\": false,\n    \"is_trained\": true,\n    \"file_ids\": [\"c71pmdbo2ua691f0fkog\"]\n}"
						},
						{
							"name": "Get Field Metadata Invalid",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/fields/{{training_field_id}}/metadata",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"fields",
										"{{training_field_id}}",
										"metadata"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-length",
									"value": "105"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "date",
									"value": "Thu, 23 Dec 2021 18:59:35 GMT"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "4"
								},
								{
									"key": "server",
									"value": "istio-envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"code\": \"field-id-invalid\",\n        \"message\": \"the field ID 2efa79d4-46de-8087-f70778157dbf is invalid\"\n    }\n}"
						},
						{
							"name": "Get Field Metadata Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/fields/{{training_field_id}}/metadata",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"fields",
										"{{training_field_id}}",
										"metadata"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-length",
									"value": "105"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "date",
									"value": "Thu, 23 Dec 2021 18:59:35 GMT"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "4"
								},
								{
									"key": "server",
									"value": "istio-envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"code\": \"field-id-not-found\",\n        \"message\": \"the field ID 2efa79d4-46de-8087-f70778157dbf was not found\"\n    }\n}"
						}
					]
				},
				{
					"name": "Update Field Metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The update field metadata request was successful.\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Postman Field Name Update\",\n    \"description\": \"Updated Postman Field Description Update\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zdai-base-url}}/fields/{{training_field_id}}/metadata",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"fields",
								"{{training_field_id}}",
								"metadata"
							]
						}
					},
					"response": [
						{
							"name": "Update Field Metadata",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Updated Postman Field Name Update\",\n    \"description\": \"Updated Postman Field Description Update\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zdai-base-url}}/fields/{{training_field_id}}/metadata",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"fields",
										"{{training_field_id}}",
										"metadata"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Update Field Metadata Read-Only",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Updated Postman Field Name Update\",\n    \"description\": \"Updated Postman Field Description Update\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zdai-base-url}}/fields/{{training_field_id}}/metadata",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"fields",
										"{{training_field_id}}",
										"metadata"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-length",
									"value": "114"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "date",
									"value": "Thu, 23 Dec 2021 19:06:12 GMT"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "255"
								},
								{
									"key": "server",
									"value": "istio-envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"code\": \"field-id-read-only\",\n        \"message\": \"the field ID 005801fc-495f-4599-9a84-d02360c442d9 is read only\"\n    }\n}"
						},
						{
							"name": "Update Field Metadata Not Found",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Updated Postman Field Name Update\",\n    \"description\": \"Updated Postman Field Description Update\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zdai-base-url}}/fields/{{training_field_id}}/metadata",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"fields",
										"{{training_field_id}}",
										"metadata"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-length",
									"value": "115"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "date",
									"value": "Thu, 23 Dec 2021 19:08:11 GMT"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "308"
								},
								{
									"key": "server",
									"value": "istio-envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"code\": \"field-id-not-found\",\n        \"message\": \"the field ID 005801fc-495f-4599-9a84-d02360c442d8 was not found\"\n    }\n}"
						}
					]
				},
				{
					"name": "Get Field Accuracy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"The field metadata request was successful.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The field metadata response contains the metdata.\", function () {",
									"    pm.expect(jsonData).to.have.property(\"f_score\");",
									"    pm.expect(jsonData).to.have.property(\"precision\");",
									"    pm.expect(jsonData).to.have.property(\"recall\");",
									"    pm.expect(jsonData).to.have.property(\"example_count\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{zdai-base-url}}/fields/{{training_field_id}}/accuracy",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"fields",
								"{{training_field_id}}",
								"accuracy"
							]
						}
					},
					"response": [
						{
							"name": "Get Field Accuracy",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/fields/{{training_field_id}}/accuracy",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"fields",
										"{{training_field_id}}",
										"accuracy"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"f_score\": 0.95,\n    \"precision\": 0.9,\n    \"recall\": 1,\n    \"example_count\": 73\n}"
						},
						{
							"name": "Get Field Accuracy Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/fields/{{training_field_id}}/accuracy",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"fields",
										"{{training_field_id}}",
										"accuracy"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"code\": \"field-id-not-found\",\n        \"message\": \"the field ID 005801fc-495f-4599-9a84-d02360c442d8 was not found\"\n    }\n}"
						}
					]
				},
				{
					"name": "Get Field Validation Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"The field validation details request was successful.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{zdai-base-url}}/fields/{{training_field_id}}/validation-details",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"fields",
								"{{training_field_id}}",
								"validation-details"
							]
						}
					},
					"response": [
						{
							"name": "Get Validation Details",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/fields/{{training_field_id}}/validation-details",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"fields",
										"{{training_field_id}}",
										"validation-details"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "[\n    {\n        \"file_id\": \"c71pmdbo2ua691f0fkog\",\n        \"type\": \"tp\",\n        \"location\": [\n            26952,\n            27310\n        ]\n    }\n]"
						},
						{
							"name": "Get Validation Details Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/fields/{{training_field_id}}/validation-details",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"fields",
										"{{training_field_id}}",
										"validation-details"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"code\": \"field-id-not-found\",\n        \"message\": \"the field ID 005801fc-495f-4599-9a84-d02360c442d8 was not found\"\n    }\n}"
						}
					]
				}
			]
		},
		{
			"name": "Field Extraction",
			"item": [
				{
					"name": "Create a Field Extraction Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"The Field Extraction request was created successfully.\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"The response contains a request_id.\", function () {",
									"    pm.expect(jsonData[\"file_ids\"][0]).to.have.property('request_id');",
									"    pm.environment.set(\"field_extraction_request_id\", jsonData[\"file_ids\"][0][\"request_id\"]);",
									"",
									"    // Chaining for when we run the whole collection",
									"    pm.environment.set(\"test_exp_backoff\", 100);",
									"    pm.environment.set(\"test_max_attempts\", 20);",
									"    pm.environment.set(\"test_attempts\", 0);",
									"    postman.setNextRequest(\"Get Extraction Request Status\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"baseurl = pm.environment.get(\"zdai-base-url\");",
									"field_ids = pm.environment.get(\"field_ids\")",
									"",
									"if (field_ids == null || field_ids == \"\") {",
									"    console.log(\"Environment variable field_ids not found, fetching fields from DocAI.\")",
									"    pm.sendRequest({",
									"        url: baseurl + \"/fields\",",
									"        method: 'GET',",
									"        header: {",
									"            \"Authorization\": `Bearer ${pm.environment.get('token')}`,",
									"            \"Content-Type\": \"application/json\"",
									"        }",
									"    }, function (err, res) {",
									"        if (err) {",
									"            throw new Error(err);",
									"        } else {",
									"            var jsonData = res.json();",
									"",
									"            field_names = [\"Date\", \"Parties\", \"Change of Control\", \"Indemnity\", \"Governing Law\"]",
									"            field_ids = []",
									"",
									"            for (var i = 0; i < jsonData.length; i++) {",
									"                var obj = jsonData[i]",
									"                var field_name = obj[\"name\"]",
									"                ",
									"                if (field_names.includes(field_name)) {",
									"                    field_ids.push('\"' + obj[\"field_id\"] + '\"')",
									"                }",
									"            }",
									"",
									"            pm.test(\"Retrieved the expected number of fields (\" + field_names.length + \")\", () => {",
									"                pm.expect(field_ids).to.have.lengthOf(field_names.length)",
									"            })",
									"",
									"            pm.environment.set(\"field_ids\", field_ids)",
									"            pm.test(\"Environment variable was set with the expected number of fields (\" + field_names.length + \")\", () => {",
									"                env_field_ids = pm.environment.get(\"field_ids\");",
									"                pm.expect(env_field_ids).to.have.lengthOf(field_names.length)",
									"            })",
									"        }",
									"    });",
									"} else {",
									"    console.log(\"GET /fields not called — found field_ids in environment variables.\")",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"file_ids\": [\n        \"{{file_id}}\"\n    ],\n    \"field_ids\": [\n        {{field_ids}}\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zdai-base-url}}/extraction",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"extraction"
							]
						}
					},
					"response": [
						{
							"name": "Field Extraction Request Created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"file_ids\": [\n        \"c5e41av1qk1er7odm79g\"\n    ],\n    \"field_ids\": [\n        \"292b0a57-556b-4904-acfa-c3f845eb2879\",\n        \"4d34c0dc-a3d4-4172-92d0-5fad8b3860a7\",\n        \"5c971bd8-fc3b-4a26-8a95-674203871dfd\",\n        \"c83868ae-269a-4a1b-b2af-c53e1f91efca\",\n        \"f743f363-1d8b-435b-8812-204a6d883835\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zdai-base-url}}/extraction",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"extraction"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_ids\": [\n        {\n            \"file_id\": \"c5e41av1qk1er7odm79g\",\n            \"field_ids\": [\n                \"292b0a57-556b-4904-acfa-c3f845eb2879\",\n                \"4d34c0dc-a3d4-4172-92d0-5fad8b3860a7\",\n                \"5c971bd8-fc3b-4a26-8a95-674203871dfd\",\n                \"c83868ae-269a-4a1b-b2af-c53e1f91efca\",\n                \"f743f363-1d8b-435b-8812-204a6d883835\"\n            ],\n            \"status\": \"queued\",\n            \"request_id\": \"c5e463f1qk154j5e3sjg\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Extraction Request Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"The extraction request status was successfully retrieved.\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    // Chaining for when we run the whole collection",
									"    if (jsonData[\"status\"] == \"complete\"|| jsonData[\"status\"] == \"failed\") {",
									"        postman.setNextRequest(\"Get Extraction Request Text Results\");",
									"        setTimeout(function(){}, 0);",
									"    } else if (jsonData[\"status\"] == \"queued\" || jsonData[\"status\"] == \"processing\") {",
									"        if (pm.environment.get(\"test_attempts\") < pm.environment.get(\"test_max_attempts\")) {",
									"            pm.environment.set(\"test_attempts\", pm.environment.get(\"test_attempts\") + 1)",
									"            pm.environment.set(\"test_exp_backoff\", Math.min(16000, 2 * pm.environment.get(\"test_exp_backoff\")));",
									"            console.log(\"setting timeout to \" + pm.environment.get(\"test_exp_backoff\") + \" ms\");",
									"            setTimeout(function(){}, pm.environment.get(\"test_exp_backoff\"));",
									"            postman.setNextRequest(\"Get Extraction Request Status\");",
									"        } else {",
									"            console.log(\"timed out\");",
									"            postman.setNextRequest(\"Get Extraction Request Text Results\");",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{zdai-base-url}}/extraction/{{field_extraction_request_id}}",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"extraction",
								"{{field_extraction_request_id}}"
							]
						}
					},
					"response": [
						{
							"name": "Field Extraction Request Completed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/extraction/{{field_extraction_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"extraction",
										"{{field_extraction_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"complete\",\n    \"request_id\": \"c5e463f1qk154j5e3sjg\"\n}"
						},
						{
							"name": "Field Extraction Request Failed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/extraction/{{field_extraction_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"extraction",
										"{{field_extraction_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"failed\",\n    \"request_id\": \"c5e463f1qk154j5e3sjg\"\n}"
						},
						{
							"name": "Field Extraction Request Processing",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/extraction/{{field_extraction_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"extraction",
										"{{field_extraction_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"processing\",\n    \"request_id\": \"c5e463f1qk154j5e3sjg\"\n}"
						},
						{
							"name": "Field Extraction Request Queued",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/extraction/{{field_extraction_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"extraction",
										"{{field_extraction_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"queued\",\n    \"request_id\": \"c5e463f1qk154j5e3sjg\"\n}"
						}
					]
				},
				{
					"name": "Get Multiple Extraction Request Statuses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{zdai-base-url}}/extractions/?request_id={{field_extraction_request_ids}}&request_id={{field_extraction_request_ids}}&request_id={{field_extraction_request_ids}}&request_id={{field_extraction_request_ids}}",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"extractions",
								""
							],
							"query": [
								{
									"key": "request_id",
									"value": "{{field_extraction_request_ids}}"
								},
								{
									"key": "request_id",
									"value": "{{field_extraction_request_ids}}"
								},
								{
									"key": "request_id",
									"value": "{{field_extraction_request_ids}}"
								},
								{
									"key": "request_id",
									"value": "{{field_extraction_request_ids}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "Field Extraction Request Completed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/extractions/?request_id=ce7lmv6hf46s6h4k48a0&request_id=ce7lmv6hf46s6h4k48ag&request_id=ce7lmv6hf46s6h4k48b0&request_id=ce7lmv6hf46s6h4k48bg",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"extractions",
										""
									],
									"query": [
										{
											"key": "request_id",
											"value": "ce7lmv6hf46s6h4k48a0"
										},
										{
											"key": "request_id",
											"value": "ce7lmv6hf46s6h4k48ag"
										},
										{
											"key": "request_id",
											"value": "ce7lmv6hf46s6h4k48b0"
										},
										{
											"key": "request_id",
											"value": "ce7lmv6hf46s6h4k48bg"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"num_found\": 4,\n    \"num_errors\": 0,\n    \"statuses\": {\n        \"ce7lmv6hf46s6h4k48a0\": {\n            \"file_id\": \"ce7ks02b08o78qsc6qog\",\n            \"status\": \"complete\",\n            \"request_id\": \"ce7lmv6hf46s6h4k48a0\"\n        },\n        \"ce7lmv6hf46s6h4k48ag\": {\n            \"file_id\": \"ce7ks3qb08o78qsc6qsg\",\n            \"status\": \"complete\",\n            \"request_id\": \"ce7lmv6hf46s6h4k48ag\"\n        },\n        \"ce7lmv6hf46s6h4k48b0\": {\n            \"file_id\": \"ce7ks62b08o78qsc6qv0\",\n            \"status\": \"complete\",\n            \"request_id\": \"ce7lmv6hf46s6h4k48b0\"\n        },\n        \"ce7lmv6hf46s6h4k48bg\": {\n            \"file_id\": \"ce7ks8ib08o78qsc6r1g\",\n            \"status\": \"complete\",\n            \"request_id\": \"ce7lmv6hf46s6h4k48bg\"\n        }\n    }\n}"
						},
						{
							"name": "Field Extraction Request Failed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/extractions/?request_id=ce7lmv6hf46s6h4k48a0&request_id=ce7lmv6hf46s6h4k48ag&request_id=ce7lmv6hf46s6h4k48b0&request_id=ce7lmv6hf46s6h4k48bg",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"extractions",
										""
									],
									"query": [
										{
											"key": "request_id",
											"value": "ce7lmv6hf46s6h4k48a0"
										},
										{
											"key": "request_id",
											"value": "ce7lmv6hf46s6h4k48ag"
										},
										{
											"key": "request_id",
											"value": "ce7lmv6hf46s6h4k48b0"
										},
										{
											"key": "request_id",
											"value": "ce7lmv6hf46s6h4k48bg"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"num_found\": 4,\n    \"num_errors\": 0,\n    \"statuses\": {\n        \"ce7lmv6hf46s6h4k48a0\": {\n            \"file_id\": \"ce7ks02b08o78qsc6qog\",\n            \"status\": \"failed\",\n            \"request_id\": \"ce7lmv6hf46s6h4k48a0\"\n        },\n        \"ce7lmv6hf46s6h4k48ag\": {\n            \"file_id\": \"ce7ks3qb08o78qsc6qsg\",\n            \"status\": \"failed\",\n            \"request_id\": \"ce7lmv6hf46s6h4k48ag\"\n        },\n        \"ce7lmv6hf46s6h4k48b0\": {\n            \"file_id\": \"ce7ks62b08o78qsc6qv0\",\n            \"status\": \"failed\",\n            \"request_id\": \"ce7lmv6hf46s6h4k48b0\"\n        },\n        \"ce7lmv6hf46s6h4k48bg\": {\n            \"file_id\": \"ce7ks8ib08o78qsc6r1g\",\n            \"status\": \"failed\",\n            \"request_id\": \"ce7lmv6hf46s6h4k48bg\"\n        }\n    }\n}"
						},
						{
							"name": "Field Extraction Request Processing",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/extractions/?request_id=ce7lmv6hf46s6h4k48a0&request_id=ce7lmv6hf46s6h4k48ag&request_id=ce7lmv6hf46s6h4k48b0&request_id=ce7lmv6hf46s6h4k48bg",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"extractions",
										""
									],
									"query": [
										{
											"key": "request_id",
											"value": "ce7lmv6hf46s6h4k48a0"
										},
										{
											"key": "request_id",
											"value": "ce7lmv6hf46s6h4k48ag"
										},
										{
											"key": "request_id",
											"value": "ce7lmv6hf46s6h4k48b0"
										},
										{
											"key": "request_id",
											"value": "ce7lmv6hf46s6h4k48bg"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"num_found\": 4,\n    \"num_errors\": 0,\n    \"statuses\": {\n        \"ce7lmv6hf46s6h4k48a0\": {\n            \"file_id\": \"ce7ks02b08o78qsc6qog\",\n            \"status\": \"processing\",\n            \"request_id\": \"ce7lmv6hf46s6h4k48a0\"\n        },\n        \"ce7lmv6hf46s6h4k48ag\": {\n            \"file_id\": \"ce7ks3qb08o78qsc6qsg\",\n            \"status\": \"processing\",\n            \"request_id\": \"ce7lmv6hf46s6h4k48ag\"\n        },\n        \"ce7lmv6hf46s6h4k48b0\": {\n            \"file_id\": \"ce7ks62b08o78qsc6qv0\",\n            \"status\": \"processing\",\n            \"request_id\": \"ce7lmv6hf46s6h4k48b0\"\n        },\n        \"ce7lmv6hf46s6h4k48bg\": {\n            \"file_id\": \"ce7ks8ib08o78qsc6r1g\",\n            \"status\": \"processing\",\n            \"request_id\": \"ce7lmv6hf46s6h4k48bg\"\n        }\n    }\n}"
						},
						{
							"name": "Field Extraction Request Queued",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/extractions/?request_id=ce7lmv6hf46s6h4k48a0&request_id=ce7lmv6hf46s6h4k48ag&request_id=ce7lmv6hf46s6h4k48b0&request_id=ce7lmv6hf46s6h4k48bg",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"extractions",
										""
									],
									"query": [
										{
											"key": "request_id",
											"value": "ce7lmv6hf46s6h4k48a0"
										},
										{
											"key": "request_id",
											"value": "ce7lmv6hf46s6h4k48ag"
										},
										{
											"key": "request_id",
											"value": "ce7lmv6hf46s6h4k48b0"
										},
										{
											"key": "request_id",
											"value": "ce7lmv6hf46s6h4k48bg"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"num_found\": 4,\n    \"num_errors\": 0,\n    \"statuses\": {\n        \"ce7lmv6hf46s6h4k48a0\": {\n            \"file_id\": \"ce7ks02b08o78qsc6qog\",\n            \"status\": \"queued\",\n            \"request_id\": \"ce7lmv6hf46s6h4k48a0\"\n        },\n        \"ce7lmv6hf46s6h4k48ag\": {\n            \"file_id\": \"ce7ks3qb08o78qsc6qsg\",\n            \"status\": \"queued\",\n            \"request_id\": \"ce7lmv6hf46s6h4k48ag\"\n        },\n        \"ce7lmv6hf46s6h4k48b0\": {\n            \"file_id\": \"ce7ks62b08o78qsc6qv0\",\n            \"status\": \"queued\",\n            \"request_id\": \"ce7lmv6hf46s6h4k48b0\"\n        },\n        \"ce7lmv6hf46s6h4k48bg\": {\n            \"file_id\": \"ce7ks8ib08o78qsc6r1g\",\n            \"status\": \"queued\",\n            \"request_id\": \"ce7lmv6hf46s6h4k48bg\"\n        }\n    }\n}"
						},
						{
							"name": "Retrieval failed due to invalid request_id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/extractions/?request_id=ce7lmv6hf46s6h4k48a0&request_id=ce7lmv6hf46s6h4k48ag&request_id=ce7lmv6hf46s6h4k48b0&request_id=ce7lmv6hf46s6h4k48bg",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"extractions",
										""
									],
									"query": [
										{
											"key": "request_id",
											"value": "ce7lmv6hf46s6h4k48a0"
										},
										{
											"key": "request_id",
											"value": "ce7lmv6hf46s6h4k48ag"
										},
										{
											"key": "request_id",
											"value": "ce7lmv6hf46s6h4k48b0"
										},
										{
											"key": "request_id",
											"value": "ce7lmv6hf46s6h4k48bg"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"num_found\": 3,\n    \"num_errors\": 1,\n    \"statuses\": {\n        \"ce7lmv6hf46s6h4k48a0\": {\n            \"file_id\": \"ce7ks02b08o78qsc6qog\",\n            \"status\": \"complete\",\n            \"request_id\": \"ce7lmv6hf46s6h4k48a0\"\n        },\n        \"ce7lmv6hf46s6h4k48ag\": {\n            \"file_id\": \"ce7ks3qb08o78qsc6qsg\",\n            \"status\": \"complete\",\n            \"request_id\": \"ce7lmv6hf46s6h4k48ag\"\n        },\n        \"ce7lmv6hf46s6h4k48b0\": {\n            \"file_id\": \"ce7ks62b08o78qsc6qv0\",\n            \"status\": \"complete\",\n            \"request_id\": \"ce7lmv6hf46s6h4k48b0\"\n        }\n    },\n    \"errors\": {\n        \"ce7lmv6hf46s6h4k48bg\": {\n            \"error\": {\n                \"code\": \"invalid_request_id_format\",\n                \"message\": \"The request ID provided is not in desired format\"\n            }\n        }\n    }\n}"
						},
						{
							"name": "Retrieval failed due to request_id not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/extractions/?request_id=ce7lmv6hf46s6h4k48a0&request_id=ce7lmv6hf46s6h4k48ag&request_id=ce7lmv6hf46s6h4k48b0&request_id=ce7lmv6hf46s6h4k48bg",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"extractions",
										""
									],
									"query": [
										{
											"key": "request_id",
											"value": "ce7lmv6hf46s6h4k48a0"
										},
										{
											"key": "request_id",
											"value": "ce7lmv6hf46s6h4k48ag"
										},
										{
											"key": "request_id",
											"value": "ce7lmv6hf46s6h4k48b0"
										},
										{
											"key": "request_id",
											"value": "ce7lmv6hf46s6h4k48bg"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"num_found\": 3,\n    \"num_errors\": 1,\n    \"statuses\": {\n        \"ce7lmv6hf46s6h4k48a0\": {\n            \"file_id\": \"ce7ks02b08o78qsc6qog\",\n            \"status\": \"complete\",\n            \"request_id\": \"ce7lmv6hf46s6h4k48a0\"\n        },\n        \"ce7lmv6hf46s6h4k48ag\": {\n            \"file_id\": \"ce7ks3qb08o78qsc6qsg\",\n            \"status\": \"complete\",\n            \"request_id\": \"ce7lmv6hf46s6h4k48ag\"\n        },\n        \"ce7lmv6hf46s6h4k48b0\": {\n            \"file_id\": \"ce7ks62b08o78qsc6qv0\",\n            \"status\": \"complete\",\n            \"request_id\": \"ce7lmv6hf46s6h4k48b0\"\n        }\n    },\n    \"errors\": {\n        \"ce7lmv6hf46s6h4k48bg\": {\n            \"error\": {\n                \"code\": \"request_not_found\",\n                \"message\": \"The specified request ID cannot be found\"\n            }\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Get Extraction Request Text Results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"The extraction request text was successfully returned.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The extraction request results are valid.\", function() {",
									"    pm.expect(jsonData).to.have.property(\"results\");",
									"    pm.expect(jsonData[\"results\"].length).to.have.greaterThan(0)",
									"});",
									"",
									"// Chaining for when we run the whole collection",
									"postman.setNextRequest(\"Create a Document Classification Request\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{zdai-base-url}}/extraction/{{field_extraction_request_id}}/results/text",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"extraction",
								"{{field_extraction_request_id}}",
								"results",
								"text"
							]
						}
					},
					"response": [
						{
							"name": "Field Extraction Results",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/extraction/{{field_extraction_request_id}}/results/text",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"extraction",
										"{{field_extraction_request_id}}",
										"results",
										"text"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"request_id\": \"c5e463f1qk154j5e3sjg\",\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"results\": [\n        {\n            \"field_id\": \"292b0a57-596b-4904-acfa-c3f845eb2179\",\n            \"extractions\": [\n                {\n                    \"text\": \"Subject to the release provision ...\",\n                    \"spans\": [\n                        {\n                            \"start\": 48246,\n                            \"end\": 49501,\n                            \"pages\": {\n                                \"start\": 11,\n                                \"end\": 11\n                            },\n                            \"bounds\": {\n                                \"top\": 2563,\n                                \"left\": 227,\n                                \"bottom\": 3092,\n                                \"right\": 1946\n                            }\n                        }\n                    ]\n                },\n                {\n                    \"text\": \"(c) Notwithstanding anyth ...\",\n                    \"spans\": [\n                        {\n                            \"start\": 76960,\n                            \"end\": 78395,\n                            \"pages\": {\n                                \"start\": 17,\n                                \"end\": 18\n                            },\n                            \"bounds\": {\n                                \"top\": 133,\n                                \"left\": 223,\n                                \"bottom\": 3117,\n                                \"right\": 2092\n                            }\n                        }\n                    ]\n                },\n                {\n                    \"text\": \"In the Landlord shall, ...\",\n                    \"spans\": [\n                        {\n                            \"start\": 84079,\n                            \"end\": 85076,\n                            \"pages\": {\n                                \"start\": 19,\n                                \"end\": 19\n                            },\n                            \"bounds\": {\n                                \"top\": 1986,\n                                \"left\": 2422,\n                                \"bottom\": 2539,\n                                \"right\": 297\n                            }\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            \"field_id\": \"5c971bd8-fc3b-4a26-8b95-674202871dfd\",\n            \"extractions\": [\n                {\n                    \"text\": \"(ii) any entit ...\",\n                    \"spans\": [\n                        {\n                            \"start\": 59971,\n                            \"end\": 60408,\n                            \"pages\": {\n                                \"start\": 14,\n                                \"end\": 14\n                            },\n                            \"bounds\": {\n                                \"top\": 804,\n                                \"left\": 314,\n                                \"bottom\": 1130,\n                                \"right\": 1850\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}"
						},
						{
							"name": "Request on a processing or failed request_id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/extraction/{{field_extraction_request_id}}/results/text",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"extraction",
										"{{field_extraction_request_id}}",
										"results",
										"text"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"code\": \"extract_result_not_available\",\n        \"message\": \"Extract result has not been prepared yet.\"\n    }\n}"
						}
					]
				}
			]
		},
		{
			"name": "Document Classification",
			"item": [
				{
					"name": "Create a Document Classification Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"The Document Classification request was created successfully.\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"The response contains a request_id.\", function () {",
									"    pm.expect(jsonData[\"file_ids\"][0]).to.have.property('request_id');",
									"    pm.environment.set(\"document_classification_request_id\", jsonData[\"file_ids\"][0][\"request_id\"]);",
									"",
									"    // Chaining for when we run the whole collection",
									"    pm.environment.set(\"test_exp_backoff\", 100);",
									"    pm.environment.set(\"test_max_attempts\", 20);",
									"    pm.environment.set(\"test_attempts\", 0);",
									"    postman.setNextRequest(\"Get Document Classification Request Status\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"file_ids\": [\n        \"{{file_id}}\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zdai-base-url}}/classification",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"classification"
							]
						}
					},
					"response": [
						{
							"name": "Document Classification Request Created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"file_ids\": [\n        \"c5e41av1qk1er7odm79g\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zdai-base-url}}/classification",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"classification"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_ids\": [\n        {\n            \"file_id\": \"c5e41av1qk1er7odm79g\",\n            \"status\": \"queued\",\n            \"request_id\": \"c5e43kf1qk1bstse6nrg\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Document Classification Request Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"jsonData = pm.response.json()",
									"",
									"pm.test(\"The document classification request status was successfully retrieved.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The document claissification request status returns classification successfully\", function() {",
									"    if (jsonData[\"status\"] == \"complete\") {",
									"        pm.expect(jsonData).to.have.property('classification');",
									"        pm.expect(jsonData).to.have.property('is_contract');",
									"    }",
									"",
									"    // Chaining for when we run the whole collection",
									"    if (jsonData[\"status\"] == \"complete\"|| jsonData[\"status\"] == \"failed\") {",
									"        postman.setNextRequest(\"Create a Language Classification Request\");",
									"        setTimeout(function(){}, 0);",
									"    } else if (jsonData[\"status\"] == \"queued\" || jsonData[\"status\"] == \"processing\") {",
									"        if (pm.environment.get(\"test_attempts\") < pm.environment.get(\"test_max_attempts\")) {",
									"            pm.environment.set(\"test_attempts\", pm.environment.get(\"test_attempts\") + 1)",
									"            pm.environment.set(\"test_exp_backoff\", Math.min(16000, 2 * pm.environment.get(\"test_exp_backoff\")));",
									"            console.log(\"setting timeout to \" + pm.environment.get(\"test_exp_backoff\") + \" ms\");",
									"            setTimeout(function(){}, pm.environment.get(\"test_exp_backoff\"));",
									"            postman.setNextRequest(\"Get Document Classification Request Status\");",
									"        } else {",
									"            console.log(\"timed out\");",
									"            postman.setNextRequest(\"Create a Language Classification Request\");",
									"        }",
									"    }",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{zdai-base-url}}/classification/{{document_classification_request_id}}",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"classification",
								"{{document_classification_request_id}}"
							]
						}
					},
					"response": [
						{
							"name": "Document Classification Request Completed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/classification/{{document_classification_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"classification",
										"{{document_classification_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"complete\",\n    \"request_id\": \"c5e43kf1qk1bstse6nrg\",\n    \"classification\": \"Real Estate Agt\",\n    \"is_contract\": true\n}"
						},
						{
							"name": "Document Classification Request Failed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/classification/{{document_classification_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"classification",
										"{{document_classification_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"failed\",\n    \"request_id\": \"c5e43kf1qk1bstse6nrg\"\n}"
						},
						{
							"name": "Document Classification Request Processing",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/classification/{{document_classification_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"classification",
										"{{document_classification_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"processing\",\n    \"request_id\": \"c5e43kf1qk1bstse6nrg\"\n}"
						},
						{
							"name": "Document Classification Request Queued",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/classification/{{document_classification_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"classification",
										"{{document_classification_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"queued\",\n    \"request_id\": \"c5e43kf1qk1bstse6nrg\"\n}"
						}
					]
				},
				{
					"name": "Get Multiple Document Classification Request Statuses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"jsonData = pm.response.json()",
									"",
									"pm.test(\"The document classification request status was successful.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response contains a request_id.\", function () {",
									"    pm.expect(jsonData[\"file_ids\"][0]).to.have.property('request_id');",
									"    pm.environment.set(\"language_classification_request_id\", jsonData[\"file_ids\"][0][\"request_id\"]);",
									"",
									"    // Chaining for when we run the whole collection",
									"    pm.environment.set(\"test_exp_backoff\", 100);",
									"    pm.environment.set(\"test_max_attempts\", 20);",
									"    pm.environment.set(\"test_attempts\", 0);",
									"    postman.setNextRequest(\"Get Language Classification Request Status\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{zdai-base-url}}/classifications?request_id=request_id",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"classifications"
							],
							"query": [
								{
									"key": "request_id",
									"value": "request_id"
								}
							]
						}
					},
					"response": [
						{
							"name": "Document Classification Request Completed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/classification/{{document_classification_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"classification",
										"{{document_classification_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"complete\",\n    \"request_id\": \"c5e43kf1qk1bstse6nrg\",\n    \"classification\": \"Real Estate Agt\",\n    \"is_contract\": true\n}"
						},
						{
							"name": "Document Classification Request Failed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/classification/{{document_classification_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"classification",
										"{{document_classification_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"failed\",\n    \"request_id\": \"c5e43kf1qk1bstse6nrg\"\n}"
						},
						{
							"name": "Document Classification Request Processing",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/classification/{{document_classification_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"classification",
										"{{document_classification_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"processing\",\n    \"request_id\": \"c5e43kf1qk1bstse6nrg\"\n}"
						},
						{
							"name": "Document Classification Request Queued",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/classification/{{document_classification_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"classification",
										"{{document_classification_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"queued\",\n    \"request_id\": \"c5e43kf1qk1bstse6nrg\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Language Classification",
			"item": [
				{
					"name": "Create a Language Classification Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"The Language Classification request was created successfully.\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"The response contains a request_id.\", function () {",
									"    pm.expect(jsonData[\"file_ids\"][0]).to.have.property('request_id');",
									"    pm.environment.set(\"language_classification_request_id\", jsonData[\"file_ids\"][0][\"request_id\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"file_ids\": [\n        \"{{file_id}}\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zdai-base-url}}/language",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"language"
							]
						}
					},
					"response": [
						{
							"name": "Language Classification Request Created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"file_ids\": [\n        \"c5e41av1qk1er7odm79g\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zdai-base-url}}/language",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"language"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_ids\": [\n        {\n            \"file_id\": \"c5e41av1qk1er7odm79g\",\n            \"status\": \"queued\",\n            \"request_id\": \"c5e45a8vsl2ss5f0vmdg\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Language Classification Request Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"jsonData = pm.response.json()",
									"",
									"pm.test(\"The language classification request status was successfully retrieved.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The language classification request status returns classification successfully\", function() {",
									"    if (jsonData[\"status\"] == \"complete\") {",
									"        pm.expect(jsonData).to.have.property('language');",
									"    }",
									"",
									"    // Chaining for when we run the whole collection",
									"    if (jsonData[\"status\"] == \"complete\"|| jsonData[\"status\"] == \"failed\") {",
									"        postman.setNextRequest(null);",
									"        setTimeout(function(){}, 0);",
									"    } else if (jsonData[\"status\"] == \"queued\" || jsonData[\"status\"] == \"processing\") {",
									"        if (pm.environment.get(\"test_attempts\") < pm.environment.get(\"test_max_attempts\")) {",
									"            pm.environment.set(\"test_attempts\", pm.environment.get(\"test_attempts\") + 1)",
									"            pm.environment.set(\"test_exp_backoff\", Math.min(16000, 2 * pm.environment.get(\"test_exp_backoff\")));",
									"            console.log(\"setting timeout to \" + pm.environment.get(\"test_exp_backoff\") + \" ms\");",
									"            setTimeout(function(){}, pm.environment.get(\"test_exp_backoff\"));",
									"            postman.setNextRequest(\"Get Language Classification Request Status\");",
									"        } else {",
									"            console.log(\"timed out\");",
									"            postman.setNextRequest(null);",
									"        }",
									"    }",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{zdai-base-url}}/language/{{language_classification_request_id}}",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"language",
								"{{language_classification_request_id}}"
							]
						}
					},
					"response": [
						{
							"name": "Language Classification Request Completed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/language/{{language_classification_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"language",
										"{{language_classification_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"complete\",\n    \"request_id\": \"c5e45a8vsl2ss5f0vmdg\",\n    \"language\": \"English\"\n}"
						},
						{
							"name": "Language Classification Request Failed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/language/{{language_classification_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"language",
										"{{language_classification_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"failed\",\n    \"request_id\": \"c5e45a8vsl2ss5f0vmdg\"\n}"
						},
						{
							"name": "Language Classification Request Processing",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/language/{{language_classification_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"language",
										"{{language_classification_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"processing\",\n    \"request_id\": \"c5e45a8vsl2ss5f0vmdg\"\n}"
						},
						{
							"name": "Language Classification Request Queued",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/language/{{language_classification_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"language",
										"{{language_classification_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"queued\",\n    \"request_id\": \"c5e45a8vsl2ss5f0vmdg\"\n}"
						}
					]
				},
				{
					"name": "Get Multiple Language Classification Request Statuses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"jsonData = pm.response.json()",
									"",
									"pm.test(\"The language classification request status was successful.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The language claissification request status returns classification successfully\", function() {",
									"    if (jsonData[\"status\"] == \"complete\") {",
									"        pm.expect(jsonData).to.have.property('language');",
									"    }",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{zdai-base-url}}/languages?request_id=cdrpvcmllb3b7mo4tb9g&request_id=cdrpvcmllb3b7mo4tba0&request_id=cdrpvcmllb3b7mo4tbag&request_id=cdrpvcmllb3b7mo4tbb0&request_id=invalid",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"languages"
							],
							"query": [
								{
									"key": "request_id",
									"value": "cdrpvcmllb3b7mo4tb9g"
								},
								{
									"key": "request_id",
									"value": "cdrpvcmllb3b7mo4tba0"
								},
								{
									"key": "request_id",
									"value": "cdrpvcmllb3b7mo4tbag"
								},
								{
									"key": "request_id",
									"value": "cdrpvcmllb3b7mo4tbb0"
								},
								{
									"key": "request_id",
									"value": "invalid"
								}
							]
						}
					},
					"response": [
						{
							"name": "Language Classification Request Completed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/language/{{language_classification_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"language",
										"{{language_classification_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"complete\",\n    \"request_id\": \"c5e45a8vsl2ss5f0vmdg\",\n    \"language\": \"English\"\n}"
						},
						{
							"name": "Language Classification Request Failed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/language/{{language_classification_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"language",
										"{{language_classification_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"failed\",\n    \"request_id\": \"c5e45a8vsl2ss5f0vmdg\"\n}"
						},
						{
							"name": "Language Classification Request Processing",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/language/{{language_classification_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"language",
										"{{language_classification_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"processing\",\n    \"request_id\": \"c5e45a8vsl2ss5f0vmdg\"\n}"
						},
						{
							"name": "Language Classification Request Queued",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/language/{{language_classification_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"language",
										"{{language_classification_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"queued\",\n    \"request_id\": \"c5e45a8vsl2ss5f0vmdg\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Multi-Level Classification",
			"item": [
				{
					"name": "Create an MLC Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"The Document Classification request was created successfully.\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"The response contains a request_id.\", function () {",
									"    pm.expect(jsonData[\"file_ids\"][0]).to.have.property('request_id');",
									"    pm.environment.set(\"document_classification_request_id\", jsonData[\"file_ids\"][0][\"request_id\"]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"file_ids\": [\n        \"cduk2nsasa93oh7beemg\",\n        \"cduk2rcasa93oh7beepg\",\n        \"cduk2tsasa93oh7bees0\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zdai-base-url}}/mlc",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"mlc"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MLC Request Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"jsonData = pm.response.json()",
									"",
									"pm.test(\"The document classification request status was successful.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The document claissification request status returns classification successfully\", function() {",
									"    if (jsonData[\"status\"] == \"complete\") {",
									"        pm.expect(jsonData).to.have.property('classification');",
									"        pm.expect(jsonData).to.have.property('is_contract');",
									"    }",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{zdai-base-url}}/mlc/cdujop4asa9ams8tnku0",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"mlc",
								"cdujop4asa9ams8tnku0"
							]
						}
					},
					"response": [
						{
							"name": "Document Classification Request Completed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/classification/{{document_classification_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"classification",
										"{{document_classification_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"complete\",\n    \"request_id\": \"c5e43kf1qk1bstse6nrg\",\n    \"classification\": \"Real Estate Agt\",\n    \"is_contract\": true\n}"
						},
						{
							"name": "Document Classification Request Failed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/classification/{{document_classification_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"classification",
										"{{document_classification_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"failed\",\n    \"request_id\": \"c5e43kf1qk1bstse6nrg\"\n}"
						},
						{
							"name": "Document Classification Request Processing",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/classification/{{document_classification_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"classification",
										"{{document_classification_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"processing\",\n    \"request_id\": \"c5e43kf1qk1bstse6nrg\"\n}"
						},
						{
							"name": "Document Classification Request Queued",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/classification/{{document_classification_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"classification",
										"{{document_classification_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"queued\",\n    \"request_id\": \"c5e43kf1qk1bstse6nrg\"\n}"
						}
					]
				},
				{
					"name": "Get Multiple MLC Request Statuses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"jsonData = pm.response.json()",
									"",
									"pm.test(\"The document classification request status was successful.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The document claissification request status returns classification successfully\", function() {",
									"    if (jsonData[\"status\"] == \"complete\") {",
									"        pm.expect(jsonData).to.have.property('classification');",
									"        pm.expect(jsonData).to.have.property('is_contract');",
									"    }",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{zdai-base-url}}/mlcs?request_id=cdujop4asa9ams8tnku0&request_id=cduk34cnmvd78cp0rra0&request_id=cduk34cnmvd78cp0rrag&request_id=cduk34knmvd78cp0rrb0",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"mlcs"
							],
							"query": [
								{
									"key": "request_id",
									"value": "cdujop4asa9ams8tnku0"
								},
								{
									"key": "request_id",
									"value": "cduk34cnmvd78cp0rra0"
								},
								{
									"key": "request_id",
									"value": "cduk34cnmvd78cp0rrag"
								},
								{
									"key": "request_id",
									"value": "cduk34knmvd78cp0rrb0"
								}
							]
						}
					},
					"response": [
						{
							"name": "Document Classification Request Completed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/classification/{{document_classification_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"classification",
										"{{document_classification_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"complete\",\n    \"request_id\": \"c5e43kf1qk1bstse6nrg\",\n    \"classification\": \"Real Estate Agt\",\n    \"is_contract\": true\n}"
						},
						{
							"name": "Document Classification Request Failed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/classification/{{document_classification_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"classification",
										"{{document_classification_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"failed\",\n    \"request_id\": \"c5e43kf1qk1bstse6nrg\"\n}"
						},
						{
							"name": "Document Classification Request Processing",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/classification/{{document_classification_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"classification",
										"{{document_classification_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"processing\",\n    \"request_id\": \"c5e43kf1qk1bstse6nrg\"\n}"
						},
						{
							"name": "Document Classification Request Queued",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{zdai-base-url}}/classification/{{document_classification_request_id}}",
									"host": [
										"{{zdai-base-url}}"
									],
									"path": [
										"classification",
										"{{document_classification_request_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"file_id\": \"c5e41av1qk1er7odm79g\",\n    \"status\": \"queued\",\n    \"request_id\": \"c5e43kf1qk1bstse6nrg\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Normalize",
			"item": [
				{
					"name": "Normalize Currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"The custom field training request was created successfully.\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"The response contains a request_id.\", function () {",
									"    pm.expect(jsonData).to.have.property(\"request_id\");",
									"    pm.environment.set(\"field_training_request_id\", jsonData[\"request_id\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\":\"The rent is two thousand three hundred forty seven dollars\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zdai-base-url}}/normalize/currency",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"normalize",
								"currency"
							]
						}
					},
					"response": []
				},
				{
					"name": "Normalize Date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"The custom field training request was created successfully.\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"The response contains a request_id.\", function () {",
									"    pm.expect(jsonData).to.have.property(\"request_id\");",
									"    pm.environment.set(\"field_training_request_id\", jsonData[\"request_id\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\":\"The lease terminates on Monday, November 28, 2022\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zdai-base-url}}/normalize/date",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"normalize",
								"date"
							]
						}
					},
					"response": []
				},
				{
					"name": "Normalize Duration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"The custom field training request was created successfully.\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"The response contains a request_id.\", function () {",
									"    pm.expect(jsonData).to.have.property(\"request_id\");",
									"    pm.environment.set(\"field_training_request_id\", jsonData[\"request_id\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"The contract expires 4 months after termination\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zdai-base-url}}/normalize/duration",
							"host": [
								"{{zdai-base-url}}"
							],
							"path": [
								"normalize",
								"duration"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}